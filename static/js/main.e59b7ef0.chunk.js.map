{"version":3,"sources":["constants/colors.js","components/Tile.jsx","components/Board.jsx","App.js","serviceWorker.js","index.js"],"names":["colors","0","2","4","8","16","32","64","128","256","512","1024","2048","4096","8192","16384","StyledTile","styled","className","value","props","StyledRow","values","StyledBoard","slice","BOARD_SIZE","Math","pow","initialValues","floor","random","StyledAppContainer","children","onKeyDown","tabIndex","App","useState","setValues","getValue","i","j","rotateTiles","direction","rotatedValues","BOARD_WIDTH","push","slideAndMergeRow","row","newRow","merged","Array","fill","curr","slideTiles","tempValues","newValues","concat","left","right","up","down","undoRotateTiles","pressKey","e","key","toLowerCase","canSlideTiles","freeTiles","length","generateNewTile","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e59b7ef0.chunk.js","sourcesContent":["const colors = {\n  0: '#455a64',\n  2: '#673ab7',\n  4: '#3f51b5',\n  8: '#2196f3',\n  16: '#039be5',\n  32: '#0097a7',\n  64: '#009688',\n  128: '#43a047',\n  256: '#689f38',\n  512: '#ef6c00',\n  1024: '#ff5722',\n  2048: '#f44336',\n  4096: '#e91e63',\n  8192: '#9c27b0',\n  16384: '#000000',\n};\n\nexport default colors;\n","import React from 'react';\nimport styled from 'styled-components'\nimport colors from '../constants/colors';\n\nconst Tile = ({ className, value }) => {\n  return (\n    <div className={className}>\n      {value !== 0 && value}\n    </div>\n  );\n};\n\nconst StyledTile = styled(Tile)`\n  width: 90px;\n  height: 90px;\n  background: ${props => colors[props.value]};\n  color: white;\n  font-size: 30px;\n  line-height: 90px;\n`;\n\nexport default StyledTile;\n","import React from 'react';\nimport styled from 'styled-components'\nimport Tile from './Tile.jsx';\n\nconst Row = ({ className, values }) => {\n  return (\n    <div className={className}>\n      <Tile value={values[0]} />\n      <Tile value={values[1]} />\n      <Tile value={values[2]} />\n      <Tile value={values[3]} />\n    </div>\n  );\n};\n\nconst StyledRow = styled(Row)`\n  width: 400px;\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst Board = ({ className, values }) => {\n  return (\n    <div className={className}>\n      <StyledRow values={values.slice(0, 4)} />\n      <StyledRow values={values.slice(4, 8)} />\n      <StyledRow values={values.slice(8, 12)} />\n      <StyledRow values={values.slice(12, 16)} />\n    </div>\n  );\n};\n\nconst StyledBoard = styled(Board)`\n  width: 400px;\n  height: 400px;\n  display: flex;\n  flex-wrap: wrap;\n  align-content: space-between;\n`;\n\nexport default StyledBoard;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport Board from './components/Board.jsx';\n\nconst BOARD_WIDTH = 4;\nconst BOARD_SIZE = Math.pow(BOARD_WIDTH, 2);\n\nconst initialValues = [\n  0,0,0,0,\n  0,0,0,0,\n  0,0,0,0,\n  0,0,0,0,\n];\n\ninitialValues[Math.floor(Math.random() * BOARD_SIZE / 2)] = 2;\ninitialValues[Math.floor((Math.random() + 1) * BOARD_SIZE / 2)] = 2;\n\nconst AppContainer = ({ className, children, onKeyDown }) => {\n  return (\n    <div\n      className={className}\n      tabIndex=\"0\"\n      onKeyDown={onKeyDown}\n    >\n      {children}\n    </div>\n  );\n};\n\nconst StyledAppContainer = styled(AppContainer)`\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n  text-align: center;\n`;\n\nconst App = () => {\n  const [values, setValues] = useState(initialValues);\n\n  const getValue = (values, i, j) => {\n    return values[i * BOARD_WIDTH + j];\n  };\n\n  const rotateTiles = (values, direction) => {\n    const rotatedValues = [];\n    switch (direction) {\n      case 'left':\n        return values;\n      case 'right':\n        for (let i = BOARD_WIDTH - 1; i >= 0; i--) {\n          for (let j = BOARD_WIDTH - 1; j >= 0; j--) {\n            rotatedValues.push(values[i * BOARD_WIDTH + j]);\n          }\n        }\n        return rotatedValues;\n      case 'up':\n        for (let j = BOARD_WIDTH - 1; j >= 0; j--) {\n          for (let i = 0; i < BOARD_WIDTH; i++) {\n            rotatedValues.push(values[i * BOARD_WIDTH + j]);\n          }\n        }\n        return rotatedValues;\n      case 'down':\n        for (let j = 0; j < BOARD_WIDTH; j++) {\n          for (let i = BOARD_WIDTH - 1; i >= 0; i--) {\n            rotatedValues.push(values[i * BOARD_WIDTH + j]);\n          }\n        }\n        return rotatedValues;\n      default:\n        return values;\n    }\n  };\n\n  const undoRotateTiles = (values, direction) => {\n    const oppositeDirection = {\n      left: 'left',\n      right: 'right',\n      up: 'down',\n      down: 'up',\n    };\n    return rotateTiles(values, oppositeDirection[direction]);\n  };\n\n  const canSlideTiles = (values, direction) => {\n    let tempValues = rotateTiles(values, direction);\n    for (let i = 0; i < BOARD_WIDTH; i++) {\n      for (let j = 1; j < BOARD_WIDTH; j++) {\n        if (getValue(tempValues, i, j) !== 0) {\n          if (getValue(tempValues, i, j-1) === 0 \n              || getValue(tempValues, i, j-1) === getValue(tempValues, i, j)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  const slideAndMergeRow = row => {\n    let newRow = [...row];\n    let merged = Array(BOARD_WIDTH).fill(false);\n    for (let i = 1; i < BOARD_WIDTH; i++) {\n      let curr = i-1;\n      while (curr >= 0 && !merged[curr+1]) {\n        if (newRow[curr] === 0) {\n          newRow[curr] = newRow[curr+1];\n          newRow[curr+1] = 0;\n          curr--;\n        } else if (newRow[curr] === newRow[curr + 1]) {\n          newRow[curr] = newRow[curr] * 2;\n          newRow[curr+1] = 0;\n          merged[curr] = true;\n          curr--;\n        } else {\n          break;\n        }\n      }\n    }\n    return newRow;\n  };\n\n  const slideTiles = (values, direction) => {\n    let tempValues = rotateTiles(values, direction);\n    let newValues = [];\n    for (let i = 0; i < BOARD_WIDTH; i++) {\n      newValues = newValues.concat(slideAndMergeRow(tempValues.slice(i * BOARD_WIDTH, (i + 1) * BOARD_WIDTH)));\n    }\n    return undoRotateTiles(newValues, direction);\n  };\n\n  const generateNewTile = values => {\n    let freeTiles = [];\n    for (let i = 0; i < BOARD_SIZE; i++) {\n      if (values[i] === 0) freeTiles.push(i);\n    }\n    let index = Math.floor(Math.random() * freeTiles.length);\n    values[freeTiles[index]] = 2;\n    return values;\n  };\n\n  const pressKey = e => {\n    switch (e.key) {\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'ArrowUp':\n      case 'ArrowDown':\n        let direction = e.key.slice(5).toLowerCase();\n        if (canSlideTiles(values, direction)) {\n          setValues(values => {\n            let newValues = [...values];\n            newValues = slideTiles(newValues, direction);\n            newValues = generateNewTile(newValues);\n            return newValues;\n          });\n        }\n        return;\n      default:\n    };\n  };\n\n  return (\n    <StyledAppContainer onKeyDown={e => pressKey(e)}>\n      <Board values={values} />\n    </StyledAppContainer>\n  );\n};\n\nexport default App;\n","// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}