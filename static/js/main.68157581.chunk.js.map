{"version":3,"sources":["components/Tile.jsx","components/Board.jsx","App.js","serviceWorker.js","index.js"],"names":["StyledTile","styled","className","value","StyledRow","values","StyledBoard","slice","initialValues","App","useState","setValues","tabIndex","onKeyDown","e","newValues","Math","floor","random","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oZAGA,IAaeA,EAPIC,aANN,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,UAAWC,EAAY,EAAZA,MACzB,OACA,yBAAKD,UAAWA,GAAsB,IAAVC,GAAeA,KAI1BF,CAAH,K,8TCLhB,IAWMG,EAAYH,aAXN,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,UAAWG,EAAa,EAAbA,OACxB,OACE,yBAAKH,UAAWA,GACd,kBAAC,EAAD,CAAMC,MAAOE,EAAO,KACpB,kBAAC,EAAD,CAAMF,MAAOE,EAAO,KACpB,kBAAC,EAAD,CAAMF,MAAOE,EAAO,KACpB,kBAAC,EAAD,CAAMF,MAAOE,EAAO,QAKRJ,CAAH,KAyBAK,EARKL,aAXN,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,UAAWG,EAAa,EAAbA,OAC1B,OACE,yBAAKH,UAAWA,GACd,kBAACE,EAAD,CAAWC,OAAQA,EAAOE,MAAM,EAAG,KACnC,kBAACH,EAAD,CAAWC,OAAQA,EAAOE,MAAM,EAAG,KACnC,kBAACH,EAAD,CAAWC,OAAQA,EAAOE,MAAM,EAAG,MACnC,kBAACH,EAAD,CAAWC,OAAQA,EAAOE,MAAM,GAAI,SAKtBN,CAAH,KC5BXO,EAAgB,CACpB,EAAE,EAAE,EAAE,EACN,EAAE,EAAE,EAAE,EACN,EAAE,EAAE,EAAE,EACN,EAAE,EAAE,EAAE,GA6BOC,EA1BH,WAAO,IAAD,EACYC,mBAASF,GADrB,mBACTH,EADS,KACDM,EADC,KAWhB,OACE,yBACET,UAAU,MACVU,SAAS,IACTC,UAAW,SAAAC,GAXbH,GAAU,SAAAN,GACR,IAAMU,EAAS,YAAOV,GAEtB,OADAU,EAAUC,KAAKC,MAAsB,GAAhBD,KAAKE,WAAkB,EACrCH,OAUP,4BAAQb,UAAU,cAChB,kBAAC,EAAD,CACEG,OAAQA,OC3BEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCHNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDkH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.68157581.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components'\n\nconst Tile = ({ className, value }) => {\n  return (\n  <div className={className}>{value !== 0 && value}</div>\n  );\n};\n\nconst StyledTile = styled(Tile)`\n  width: 90px;\n  height: 90px;\n  background: #09d3ac;\n  color: blue;\n`;\n\nexport default StyledTile;\n","import React from 'react';\nimport styled from 'styled-components'\nimport Tile from './Tile.jsx';\n\nconst Row = ({ className, values }) => {\n  return (\n    <div className={className}>\n      <Tile value={values[0]} />\n      <Tile value={values[1]} />\n      <Tile value={values[2]} />\n      <Tile value={values[3]} />\n    </div>\n  );\n};\n\nconst StyledRow = styled(Row)`\n  width: 400px;\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst Board = ({ className, values }) => {\n  return (\n    <div className={className}>\n      <StyledRow values={values.slice(0, 4)} />\n      <StyledRow values={values.slice(4, 8)} />\n      <StyledRow values={values.slice(8, 12)} />\n      <StyledRow values={values.slice(12, 16)} />\n    </div>\n  );\n};\n\nconst StyledBoard = styled(Board)`\n  width: 400px;\n  height: 400px;\n  display: flex;\n  flex-wrap: wrap;\n  align-content: space-between;\n`;\n\nexport default StyledBoard;\n","import React, { useState } from 'react';\nimport './App.css';\nimport Board from './components/Board.jsx';\n\nconst initialValues = [\n  0,0,0,0,\n  0,0,0,0,\n  0,0,0,0,\n  0,0,0,0,\n];\n\nconst App = () => {\n  const [values, setValues] = useState(initialValues);\n\n  const generateNewTile = () => {\n    setValues(values => {\n      const newValues = [...values];\n      newValues[Math.floor(Math.random() * 16)] = 2;\n      return newValues;\n    });\n  };\n\n  return (\n    <div\n      className=\"App\"\n      tabIndex=\"0\"\n      onKeyDown={e => generateNewTile()}\n    >\n      <header className=\"App-header\">\n        <Board\n          values={values}\n        />\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}